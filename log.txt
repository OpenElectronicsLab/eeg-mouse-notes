Log
===

2011-11-26 we started designing the board.
Design ideas included:
 * focus on through-hole components with adequate space between components
   to make it easier to fabricate for those without SMT experience
 * start with an off-the-shelf arduino for the controller logic to
   to simplify design/fabrication
 * use an off-board level-shifter to simplify design/fabrication
 * reducing our board needs to little more than a break-out board
   for the ads1298
 * used unipolar (0 to 5V) analog supply rather than bipolar
   (-2.5V to 2.5V) to simplify design/fabrication
 * choose sintered silver electrodes and shielded cables to
   reduce chances that poor hardware choices would cause problems
 * choose ADS1298 as an existed integrated solution to
   reduce chances that poor hardware choices would cause problems
 * decoupling capacitors were placed as close as possible to the chip, with
   smaller capacitors places closer than larger when needed to reduce
   inductance of the traces connecting to the chip.
 * the two wires in an analog differential signal were routed as closely
   together as possible to reduce asymmetrical noise
 * each pair of signal wires were placed as far apart as feasible to
   reduce crosstalk between channels
 * analog signals were separated from digital signals to reduce crosstalk
   large ground and power planes were used to reduce ground/power inductance
   and provide some shielding

2012-01-09 Design completed and sent to Gold Phoenix PCB for fabrication
    http://www.goldphoenixpcb.com/

2012-02-19 Transitioned from Arduino IDE to Makefile based build because
    authors were more comfortable with command line tools

2012-03-04 Success reading data (test signals) from ADS1298.  Test signals
    created by setting INT_TEST bit of CONFIG2 register and the mux bits of
    each of the CHxSET registers to 101.

2012-03-28 Started STM32F407 port as a potential long-term platform capable
    of on-board signal processing and to replicate results on a different
    platform to verify that the Arduino was not a source of sampling
    problems.

2012-05-12 First electroencephalogram (EEG) samples and Fourier transforms.
    Tested beta wave activity with eyes open and eyes closed.

2012-05-19 Noted that electro-occulogram (EOG) and electro-myogram (EMG) are
    larger in magnitude than the EEG signals.

2012-05-26 Created a window showing cursor location that could be controlled.
    Noticed gradual drift in signal over time, so used difference from moving
    average as a signal.

2012-06-16 To get two independent channels for X and Y movement, we considered
    using the same frequency band in two different pairs of electrodes, using
    the same frequency band with two pairs with one shared electrode, and
    using a single pair of electrodes with two different frequency bands.

    When choosing frequency bands, we tried to choose frequencies that were
    separated in frequency space, not multiples of each other, and showed
    resting activity.  On the basis of this we choose a band around 11 Hz
    (alpha) and 23 Hz (beta).

    Set up infinite impulse response (IIR) filters for the two
    frequency bands.  Used scipy signal design routines to
    generate coefficient.

2012-06-23 More careful choice of filters.  Looked at Elliptical and
    Butterworth filters, choose filter by inspecting graphs.

2012-06-? Switched from F0 electrode as ground to sitting on a penny/5 euro
    cent as ground.

2012-07-07 Discovered error in datasheet for STM32F4Discovery board - docs
    say PE2 for the chip select of LIS302, but should be PE3; the schematic
    is correct.

2012-08-04 Discovered that crosstalk between SPI clock and signal wires
    was corrupting our communications with the ADS1298; tried adding
    resistors to signal lines, moving signals, and shielding to reduce
    crosstalk, with some success.

2012-08-11 Returned focus to the Arduino; STM32F4 was working, but
    temperamental due to crosstalk.  Changed ardunio SPI clock to
    2 MHz instead of 4 MHz for clearer communication.

2012-09-15 Increased pass-band width and decreased stop band to reduce
    latency below 1/2 second.

2012-09-22 Added color to cursor to show velocity, and added dead-zone
    to reduce unwanted movements.

2012-11-08 To verify that our perception of control was grounded in
    reality, we designed an obstacle course, scoring system,
    and bootstrapped significance testing.

2012-12-01 Created a baseline frequency as an alternative to a running
    average.

2012-12-08 Created log file, filling in previous history based on git log
    and shared memory.

2012-12-15 used two sets of signal inputs connected to KMS.
    Initially:
        * INP1 located approximately at location F7
        * INP2 located approximately at location F8
        * INN1 and INN2 shared connector located at "G" or "Fp"
        * GROUND was wired to a penny being sat upon.
    Looked at raw amplitude, however the 60Hz was dominant.
    Next, we added a broad lowpass filter for signals less than 30Hz.
    This resulted in an obvious EKG pattern.
    Next, we moved the penny from GROUND to RLDOUT.
    Eye movement was very obvious, as was teeth clenching.
    Moved electrodes:
        * INP1 moved to approximately at location FT7
        * INP2 moved to approximately at location FT8
    This did not eliminate nor greatly reduce the eye movement effect.
    Next, changed filter to 15-35 bandpass to remove EOG.
    EOG effect now no longer obvious.
    Ran trial with:
        * Vertical Sensitivity of 0.05
        * Horizontal Sensitivity of 0.10
        * Horizontal and Vertical Baselines of 0.00005
    Trial scored a mean distance of 44!


2012-12-22 Practiced a bit with EMG based control, started rebuilding and
    diagnosing/repairing board after move.  Combinations tried:
    Target               Common          IN1P             IN2P
    ---------------------------------------------
    Temporalis           F0              FT7              FT8
    Frontalis            F0              Fp1              Fp2
    Orbicularis oculi    F0        2 to 3 o' clock (lateral) margin of
                                   orbit of skull
    Board diagnosis notes:
    Unable to get signals from board (i.e. all 0s or 1s for a given sample
    with strange alternation between samples)
    Wiggling the south header changed the signal (producing some samples
    which were valid); we suspect that this header needs resoldering.

2013-01-12
    Found and fixed problem with nl board.
      (CS was mistakenly jumped to HIGH)

    Tried changing SPI.setClockDivider(SPI_CLOCK_DIV8) to DIV4 and
    DIV2. Both worked for US board connected through the digital isolator
    however, with the NL board, connected through simple level-shifters,
    the "magic" was consistently a "4" rather than a "C", so we left it
    at DIV8.

2013-01-19
    Tried another trial of EMG control US board:
        * RLDOUT was wired to a penny
        * INP1 approximately at location FT7
        * INP2 approximately at location FT8
        * INN1 and INN2 shared connector located at "G" or "Fp"
        * ./broad-wired.sh
        * Horizontal sensitivity: 0.1
        * Vertical sensitivity to 0.25
        * Baseline: Manual
        * Vert baseline: 0.00005
        * Horz baseline: 0.00005
    results:
        * 49 pixels

    Not usable results with NL board. To verify that the level-shifter
    was not the root cause, the US setup was changed from using the digital
    isolator to the level-shifter. US Board with level-shifter and
    SPI_CLOCK_DIV16 gave consistently good magic, however the resuts of two
    trials were 75 and 62 pixels. We concluded that using the level-shifter
    is fine and thus not the core problem with NL board control.

2013-02-02 * Try porting to Arduino Due.  -- in progress
    Connected ADS1298 breakout board to Adruino Due (both with digital
    isolator and directly) with some success.
        * Data was collected via the programming port.
        * The DUE requires using the SPI pins, rather than pins 50,51,52.
        * The baud rate had to be dropped to 115200 otherwise we just
          saw all FF from the board.
        * We still saw approximately one frame per second which had
          an unusual value in the first 24 bytes.
        * We were not able to communicate with the DUE via the SerialUSB port.
    In order to get the project to build with the Arduino IDE, we had to
    remove dashes from the source file names.
    Replacing dashes with underscores worked.

2013-02-16 control mouse with Arduino Due.
    * still saw bad magic from time-to-time
    * still saw some data with big spikes
    * still saw unusual values in first 24 bits even with good magic
    * we suspect spikes are result of data corruption
    * after filtering bad-magic at on the Arduino, we no longer saw
      bad magic at the desktop computer, thus the data does not seem to get
      corrupted between the arduino and the computer.
    * control with Due seemed not as good as with the Mega.

2013-03-02 tested sense of instantaneous response with battery
    Connected the ADS1298 breakout borad to Arduino Due
    Connected a battery ground to RLDOUT and IN1N
    Connected IN1P via a resistor and a jumper to battery
    Observed "seemingly instantaneous" cursor jumps when changed
      whether jumpers connected to battery


Ideas to try
============
 * Redesign board with combined isolator, Arduino, and ADS129x
   to reduce noise and serve as a programmable general purpose
   break-out board
 * Simulate bit error by creating a fake data series of all zeros
   with occasional ones and look to see how our filter responds to
   see if it looks like the noise we see while testing
 * try median smoothing with a 3 point window
 * Investigate correlating signals from different electrodes, rather than
   simply getting signals in the target band(s) from a single pair.
 * Switch to use USB serial port on Arduino Due.
 * Try controlling with big muscles, e.g. biceps brachialis,
   adductor pollicis.
 * Allow sensitivity and baseline to be specified on command line.
 * Practice.
 * Try narrower bands; may need better/faster bandpass filters.
 * Try wrapping signals wires with ground wire to reduce crosstalk on
   STM32F407.
 * Try designing active electrodes
 * Add real time spectrogram

Problem list
============
 * Improve control of cursor.
 * Communicate with DUE via SerialUSB.
 * Diagnose data corruption. (suspect crosstalk)
 * separate out view and model logic in window.pl.
 * seek and destroy dash-in-filename bug in Arduino IDE.
 * Set up the arduino to work as a mouse, perhaps initially with
   synthetic input rather than EEG/EMG.
 * Revisit filter design for RLD/BIAS circuit

Eventually
==========
 * While we are reasonably happy to operate the EEG ourselves during
   prototyping with minimal precautions, a final product must include
   isolation to protect the wearer from electrocution.

